<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[プログラミングしたり。]]></title>
  <link href="http://kino0104.github.io/atom.xml" rel="self"/>
  <link href="http://kino0104.github.io/"/>
  <updated>2015-04-01T21:55:57+09:00</updated>
  <id>http://kino0104.github.io/</id>
  <author>
    <name><![CDATA[kino0104]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[xlsxファイルをダウンロードしようとしたらzipがダウンロードされた]]></title>
    <link href="http://kino0104.github.io/blog/2015/04/01/apache-mimetype-xlsx/"/>
    <updated>2015-04-01T21:43:22+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/04/01/apache-mimetype-xlsx</id>
    <content type="html"><![CDATA[<p>タイトル通りですが、サーバ上にxlsxファイルを置いてHTMLのリンクからダウンロードしようとしたら、zipファイルでダウンロードされました。
その対処方法について記述します。</p>

<!-- more -->


<h2>対処方法</h2>

<p><code>.htaccess</code>か<code>mime.types</code>のいずれかにMIMEタイプを追記する必要があります。</p>

<p><code>.htaccess</code>の場合は、下記内容を追記します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AddType application/vnd.openxmlformats .docx .pptx .xlsx</span></code></pre></td></tr></table></div></figure>


<p>.htaccessがなかったり、このファイルを作成したくない場合は<code>mime.types</code>に追記します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>application/vnd.openxmlformats-officedocument.wordprocessingml.document  docx
</span><span class='line'>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet xlsx
</span><span class='line'>application/vnd.openxmlformats-officedocument.presentationml.presentatio pptx</span></code></pre></td></tr></table></div></figure>


<p><code>.htaccess</code>か<code>mime.types</code>がどこにある川からない場合は、下記コマンドで探しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//mime.type野場合
</span><span class='line'>find / -name mime.types</span></code></pre></td></tr></table></div></figure>


<p>また、追記する前に編集前のファイルはコピーしておきましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp mime.types mime.types.origin</span></code></pre></td></tr></table></div></figure>


<p>追記した後は、apacheを再起動する必要があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service httpd restart</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プログラムはこうして作られる、を読んでみた]]></title>
    <link href="http://kino0104.github.io/blog/2015/03/31/program-builtup-bookrv/"/>
    <updated>2015-03-31T22:21:18+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/03/31/program-builtup-bookrv</id>
    <content type="html"><![CDATA[<p>「プログラムはこうして作られる」という本を読みました。
いや、読んでいます。
まだ、読み切ってないので、タイトルに語弊はありますが、途中まで読んだ段階でメモ書きも含めて役に立ったところを書いていきたいと思います。
内容としては、著者である平山尚さんが作成したSunabaという言語を使用して、テトリスを作ってみようというものです。
あの有名なゲームであるテトリスって、どうやって考えて作られているの？というのがわかります。</p>

<!-- more -->


<h2>プログラムは思ったようには動かない。書いたように動く</h2>

<p>プログラムを書いて動かないとき、この考え方をしっかりする必要があります。
当たり前なようで、プログラミング初心者はなかなか意識できていないことではないでしょうか。</p>

<p>何かプログラムを書いて、意図しない画面表示になったときは自分が書いたプログラムがそのようになっています。
なぜ動かないんだ！と苛立ってしまったりすることがあると思います。
自分もハマってイライラしてしまうことがあり、そういうときは冷静に考えられないので、余計解決に時間がかかるという負のスパイラルになっていきます。</p>

<h2>結果から考える</h2>

<p>書いたように動く、と先ほど当たり前のことを書きました。</p>

<p>うまく動かないとなったときに、書いたプログラムとにらめっこするのではなく、
その挙動が起こうる状態はどんなときか考える、推理しようということが書かれています。</p>

<p>例えば、以下のようなコードを見てください。
ほしい結果は下記の通りですが、これを実行して得られる結果は#が1行に5つ表示されるという結果になります。
このとき、1行しか表示されないのはどんなときか考えることを推奨しています。</p>

<p>４行分繰り返していないのか、そもそも#が5つしか表示されないコードになっているのか、と言ったことが考えられると思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>for($i=0;$i&lt;4;$i++){
</span><span class='line'>  for($i=0;$i&lt;5;$i++){
</span><span class='line'>      echo "#";
</span><span class='line'>  }
</span><span class='line'>  echo "&lt;br&gt;";
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//ほしい結果
</span><span class='line'>#####
</span><span class='line'>#####
</span><span class='line'>#####
</span><span class='line'>#####
</span><span class='line'>
</span><span class='line'>//得られる結果
</span><span class='line'>#####</span></code></pre></td></tr></table></div></figure>


<p>得られた結果から、推理し、原因を追求していくということが大切だと書いてありました。</p>

<h2>思ったように書くための3つの思考</h2>

<p>今こういう結果である以上、プログラムはこうなっているはずだ、と考えて間違いを推理する。
また、ほしい結果を得るために満たすべき条件は○○だが、満たされているか、を合わせて考える。</p>

<p>これらをふまえた上で、以下の3つの思考をしましょうということが謳われています。</p>

<ul>
<li>動かしてみて、理想と現実がどう違うのかを把握する</li>
<li>このような現実になっているのはなぜかを考える</li>
<li>理想と現実を一致させるために必要なものは何かを考える</li>
</ul>


<p>「どう間違っている必要があるかを考える」ということは、自分の中でもしっかりと意識していきたいと思います。</p>

<h2>機能を知ることより、その機能が目的を果たすかを納得すること</h2>

<p>実現したいことのために、こんなことができたらよいなと考えに考え尽くした上で、機能を知ることにより、
どの場面でそれを使うべきかというのが自分のものとして理解できるというような内容が書かれていました。</p>

<p>確かに、今知っている自分の知識で、やりたいことを実現しようとして、「なんかコードが長過ぎる」「手間がかかりすぎる」となってから、機能を知るというのは重要かなと思います。</p>

<p>やりたいことをネットで探せば、ある程度近い内容のコードがあったりして、そういったものを繋ぎ合わせるだけで、動くものが作れたりもする場合があります。
しかし、この本では、自分で考えていくことの大切さはもちろんのこと、自分で考えるためにどうすればよいか、テトリスという題材を元に思考の掘り下げ方を教えてくれました。
実際にSunabaという言語を用いて、書いていくことが良いとは思いますが、本を読むだけでも参考になる点があるので、プログラミング初心者の方にはオススメの本です。</p>

<p>また、読み終わった後に、自分が勉強している言語でテトリスを作ってみるのがよいかなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitトラブルシューティング]]></title>
    <link href="http://kino0104.github.io/blog/2015/03/30/git-trouble-shooting/"/>
    <updated>2015-03-30T16:05:57+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/03/30/git-trouble-shooting</id>
    <content type="html"><![CDATA[<p>Gitを使用してる中で出会ったエラーとその対処方法について、忘れたときのメモとして残していきます。</p>

<!-- more -->


<h2>目次</h2>

<pre><code>1.git pushでrejectされた場合
</code></pre>

<h2>1.git pushでrejectされた場合</h2>

<p><code>git push origin master</code>など<code>git push</code>したら、下記のようなメッセージが表示されてpushできないということがありました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ! [rejected]        master -&gt; master (non-fast-forward)</span></code></pre></td></tr></table></div></figure>


<p>自分が変更した内容をpushしようとしたのですが、他の人がpushして自分のローカルがリモート先よりも古くなっている場合にこのメッセージが表示されます。
よって、まずはリモート内容を自分のローカル(origin/master)に取り入れて、マージする必要があります。
そのあとで、pushすることができるようになります。</p>

<p>肝心のこの状態を脱却するためのコマンドは以下の通りです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git fetch && git merge origin/master</span></code></pre></td></tr></table></div></figure>


<p>他にもgit関連でエラーとかが発生したら、ここに追記していきたいと思います。
不明点や間違いがありましたら、コメントいただければと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopressを使う]]></title>
    <link href="http://kino0104.github.io/blog/2015/03/26/octopress-install/"/>
    <updated>2015-03-26T19:56:55+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/03/26/octopress-install</id>
    <content type="html"><![CDATA[<p>Octopressを使って無料ブログを作成しましたので、その手順を説明します。
エディタとgitで管理できるので、便利かなーと思い、導入してみました。
この記事がOctopressで書く初めての記事になります。</p>

<!-- more -->


<h2>目次</h2>

<pre><code>1. Githubでリポジトリ作成
2. Octopressのインストール
3. Octopressの初期設定
4. 記事を投稿する
5. 記事の中に画像を使う
6. デプロイする
</code></pre>

<h2>1. Githubでリポジトリ作成</h2>

<p>最初にGithubへログインして、リポジトリを作成します。
リポジトリ名は<code>username.github.io</code>とします。
usernameはGithubのユーザ名を入れます。</p>

<p><img src="http://kino0104.github.io/images/2015-03-26-octopress-install/octopress1.png" alt="octopress" /></p>

<h2>2. Octopressのインストール</h2>

<p>次に、作業ディレクトリに移動して、OctopressをGithubからクローンします。
usernameはGithubのユーザ名を入れます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /work/blog
</span><span class='line'>git clone git@github.com:imathis/octopress.git username.github.io</span></code></pre></td></tr></table></div></figure>


<p>bundlerをインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler</span></code></pre></td></tr></table></div></figure>


<p>必要なgemをインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install --path vendor/bundle --jobs=4</span></code></pre></td></tr></table></div></figure>


<h2>3. Octopressの初期設定</h2>

<p>GitHub Pageに表示するために、下記コマンドを入力します。
usernameはGithubのユーザ名を入れます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake setup_github_pages
</span><span class='line'>
</span><span class='line'>Enter the read/write url for your repository
</span><span class='line'>//リポジトリのURLを聞かれるので、git@github.com: username/username.github.com.gitと入力
</span><span class='line'>Repository url: </span></code></pre></td></tr></table></div></figure>


<p>次に、_config.ymlを編集します。
この中には、ブログのタイトルやサブタイトル、著者情報などを記述します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>url:                # For rewriting urls for RSS, etc
</span><span class='line'>title:              # Used in the header and title tags
</span><span class='line'>subtitle:           # A description used in the header
</span><span class='line'>author:             # Your name, for RSS, Copyright, Metadata
</span><span class='line'>simple_search:      # Search engine for simple site search
</span><span class='line'>description:        # A default meta description for your site
</span><span class='line'>date_format:        # Format dates using Ruby's date strftime syntax
</span><span class='line'>subscribe_rss:      # Url for your blog's feed, defauts to /atom.xml
</span><span class='line'>subscribe_email:    # Url to subscribe by email (service required)
</span><span class='line'>category_feeds:     # Enable per category RSS feeds (defaults to false in 2.1)
</span><span class='line'>email:              # Email address for the RSS feed if you want it.</span></code></pre></td></tr></table></div></figure>


<h2>4. 記事を投稿する</h2>

<p>ここまで完了したら、さっそくブログ記事を作成してみます。
まずは記事のテンプレートを作成するために、下記コマンドを実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake new_post
</span><span class='line'>Enter a title for your post: //記事のタイトルを入力(この記事はoctopress-install)</span></code></pre></td></tr></table></div></figure>


<p>Enter a title for your postで入力するタイトルはパーマリンクになるので、英語で記述する必要があります。</p>

<p><code>source/_posts/2015-03-26-title.markdown</code>というようなテンプレートが生成されますので、エディタで開いて編集します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "title"
</span><span class='line'>date: 2015-03-26 19:56:55 +0900
</span><span class='line'>comments: true
</span><span class='line'>categories: [category1, category2,...]
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>//記事の内容をいかに書いていく</span></code></pre></td></tr></table></div></figure>


<p>記事のタイトルやカテゴリーを入力します。ここでのタイトルは日本語で問題ありません。</p>

<p>記事を書いたら、以下のコマンドでプレビュー表示して確認してみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>実行後に、<code>http://localhost:4000</code>にアクセスすると、
プレビューを確認できます。</p>

<h2>5. 記事の中に画像を使う</h2>

<p>記事を書いていると、画像を使いたい場合があります。
Octopressでは、画像は<code>source/images</code>に保存します。
ただ、imagesディレクトリに直接画像ファイルを置くと、わけがわからなくなるので、例えば、記事のタイトルと同じディレクトリを用意して、その中に画像ファイルを格納します。</p>

<p>今回で言うと、<code>/images/2015-03-26-octopress-install/</code>です。
octopress1.pngをここに保存しておきます。</p>

<p>Markdown記法では、画像は下記のように指定します。</p>

<pre><code>![代替テキスト](画像のURL)
</code></pre>

<p>公式(<a href="http://octopress.org/docs/plugins/image-tag/">Image Tag</a>)では、
下記の書き方が紹介されています。</p>

<pre><code>&lt;img class="[class names]" src="http://kino0104.github.io/path/to/image" title="[width] [height] [title text [alt text]]" &gt;
</code></pre>

<p>また、画像の指定は、相対指定と絶対指定があります。
この記事で一番はじめに登場する画像は下記の相対指定で書いています！</p>

<pre><code>相対指定:/images/2015-03-26-octopress-install/octopress1.png
絶対指定:http://kino0104.github.io/images/2015-03-26-octopress-install/octopress1.png
</code></pre>

<h2>6. デプロイする</h2>

<p>最後にデプロイして、記事投稿完了です。
途中、Githubのユーザ名とパスワードを入力する必要があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake deploy
</span><span class='line'>
</span><span class='line'>## Pushing generated _deploy website
</span><span class='line'>Username for 'https://github.com': 
</span><span class='line'>Password for 'https://username@github.com': </span></code></pre></td></tr></table></div></figure>


<p>簡単ではありますが、Octopressでのブログ作成手順でした。
不明点や間違いがありましたら、コメントいただければと思います。</p>
]]></content>
  </entry>
  
</feed>
