<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[プログラミングしたり。]]></title>
  <link href="http://kino0104.github.io/atom.xml" rel="self"/>
  <link href="http://kino0104.github.io/"/>
  <updated>2016-07-09T20:51:40+09:00</updated>
  <id>http://kino0104.github.io/</id>
  <author>
    <name><![CDATA[kino0104]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正規化について]]></title>
    <link href="http://kino0104.github.io/blog/2016/07/09/db-design-normalize/"/>
    <updated>2016-07-09T20:43:08+09:00</updated>
    <id>http://kino0104.github.io/blog/2016/07/09/db-design-normalize</id>
    <content type="html"><![CDATA[<p>達人に学ぶDB設計徹底指南書を読んだので、
正規化(第3正規化まで)についてまとめておく。</p>

<p>正規化とは、関数従属性を満たすように整理していくこと。
入力Xに対して、出力Yが一つに決まることをYはXに従属すると呼び、
{X}→{Y}　と表現する。</p>

<!-- more -->


<p>以下、正規化のポイント</p>

<ul>
<li>更新時の不整合を排除するために行う</li>
<li>従属性を見抜くことで可能になる</li>
<li>正規形はいつでも非正規形に戻せる</li>
<li>第3正規形までは原則行う。</li>
<li>関連エンティティが存在する場合は関連とエンティティが1対1に対応するよう注意する</li>
<li>テーブルの持つ意味が明確になる</li>
<li>テーブル数が増え、SQL文で結合処理が増えるため、パフォーマンスが悪化する</li>
</ul>


<h2>第1正規形</h2>

<p>第1正規化の定義は「一つのセルの中には一つの値しか含まない」、スカラ値であることを指す。</p>

<p>一つのセルに複数の値が入ると、主キーが各列の値を一意に決定できないため、
リレーショナルデータベースは第1正規形を満たすテーブルを作らなければならない。</p>

<h2>第2正規形</h2>

<p>主キー以外の列は主キーに従属する必要があるが、
主キーの一部の列に対して従属する列がある場合、
そのような関係を部分関数従属と呼ぶ。
主キーを構成する全ての列に従属する場合、完全関数従属と呼ぶ。</p>

<p>第2正規形とは、部分関数従属を解消し、完全関数従属にすること。</p>

<p>第2正規形でないと、部分関数従属している列にデータを登録したいときに
他の主キーの値が決まっていないと登録できない、あるいはダミー値を入れる必要が出てくること。
また、部分関数従属している列の値が{C0001,A商事}、{C0001,A商社}などとマチマチに
なってしまう可能性があること。</p>

<p>第2正規化は異なるレベルの実体(エンティティ)をテーブルとしても分離する作業と言える。</p>

<h2>第3正規形</h2>

<p>テーブル内部に存在する段階的な従属関係を推移的関数従属と呼び、
これらを解消すること。</p>

<p>下記のように二段階の関数従属を解消し、非キー列をキー列に対してのみ従属させる。</p>

<p>{社員ID}→{部署コード}→{部署名}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CakePHP]ページのタイトル変更について]]></title>
    <link href="http://kino0104.github.io/blog/2015/06/28/cakephp-layout-title/"/>
    <updated>2015-06-28T13:31:34+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/06/28/cakephp-layout-title</id>
    <content type="html"><![CDATA[<p>CakePHPでサイト構築して、ページタイトルを変更する方法を紹介します。
デフォルトのままだと、「CakePHP: the rapid development php framework:(ViewPath)」となります。
これを任意の値に変える必要があるかと思います。非常に簡単に変えることができます。</p>

<!-- more -->


<p>デフォルトのままだと、(ViewPath)になると上記で記述しましたが、どういうことかと言いますと、例えばModel:Postがあり、ControllerとしてPostsControllerがあった場合、ViewはViewディレクトリ配下にPostsディレクトリを作成し、その中に<code>index.ctp</code>などを置きます。
このときのPostsディレクトリ名がViewPathと書いた部分に当たります。</p>

<p>そして、ページタイトルは<code>app/View/Layouts/default.ctp</code>に記述があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;title&gt;
</span><span class='line'>  &lt;?php echo $cakeDescription ?&gt;:
</span><span class='line'>  &lt;?php echo $this-&gt;fetch('title'); ?&gt;
</span><span class='line'>&lt;/title&gt;</span></code></pre></td></tr></table></div></figure>


<p>ここから、タイトルは<code>$cakeDescription</code>と<code>:</code>、<code>$this-&gt;fetch('title')</code>が組合わさったものだとわかります。
<code>$cakeDescription</code>については同じファイルの中に<code>$cakeDescription = __d('cake_dev', 'CakePHP: the rapid development php framework');</code>と記述がありますね。不要であれば、削除しましょう。</p>

<p><code>$this-&gt;fetch('title');</code>の部分は各viewのファイルごとにある記述をすることで、ページタイトルを変更することができるようになっています。</p>

<p>例えば、<code>index.ctp</code>のページタイトルを「記事一覧」にしようと思ったら、<code>index.ctp</code>に以下の記述を追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>$this-&gt;assign('title', '記事一覧');
</span><span class='line'>//assign()の第一引数はfetch()の引数と合わせます。第二引数にページタイトルを記述します。
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<p>これで、任意のページタイトルに変更できます。
<code>add.ctp</code>や<code>edit.ctp</code>などの他のviewファイルも同じ記述を追加することで、ページごとにタイトルを変更できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CakePHPを導入する]]></title>
    <link href="http://kino0104.github.io/blog/2015/06/27/cakephp-install/"/>
    <updated>2015-06-27T19:29:46+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/06/27/cakephp-install</id>
    <content type="html"><![CDATA[<p>CakePHPの導入方法について、記述します。
事前準備として、サーバ環境はVagrantで構築して、<code>http://dev.cakephp-test.com/</code>というURLを与えています。
これを<code>http://dev.cakephp-test.com/tutorial/</code>として、アクセスしてCakPHPを使用していきます。</p>

<!-- more -->


<h2>CakePHPをダウンロードする</h2>

<p><a href="http://cakephp.jp/">公式サイト</a>からCakePHPをダウンロードして、作業ディレクトリにファイル一式コピーします。
今回は、tutorialディレクトリを作成して、その中にコピーしました。</p>

<p>ターミナルにて、作業ディレクトリに移動して下記コマンドを入力します。
tmpディレクトリのアクセス権を変更します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd tutorial
</span><span class='line'>chmod -R 777 app/tmp</span></code></pre></td></tr></table></div></figure>


<h2>セキュリティ設定を変更する</h2>

<p>この時点で、<code>http://dev.cakephp-test.com/tutorial/</code>にアクセスすると、色々とメッセージが出ていると思います。</p>

<p>例えば…</p>

<p>Notice (1024): Please change the value of &lsquo;Security.salt&rsquo; in APP/Config/core.php to a salt value specific to your application. [CORE/Cake/Utility/Debugger.php, line 846]
Notice (1024): Please change the value of &lsquo;Security.cipherSeed&rsquo; in APP/Config/core.php to a numeric (digits only) seed value specific to your application. [CORE/Cake/Utility/Debugger.php, line 850]</p>

<p>上記メッセージにあるように<code>app/config/core.php</code>を開いて、<code>Security.salt</code>,<code>Security.cipherSeed</code>の適当な好きな文字列に変更しましょう。</p>

<h2>DBの設定を行う</h2>

<p><code>app/config/database.php.default</code>ファイルをコピーして、<code>database.php</code>を作成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi app/Config/database.php</span></code></pre></td></tr></table></div></figure>


<p>下記部分を変更します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public $default = array(
</span><span class='line'>  'datasource' =&gt; 'Database/Mysql',
</span><span class='line'>  'persistent' =&gt; false,
</span><span class='line'>  'host' =&gt; 'localhost',
</span><span class='line'>  'login' =&gt; 'dbuser',//DBのユーザ名
</span><span class='line'>  'password' =&gt; 'dbuser',//パスワード
</span><span class='line'>  'database' =&gt; 'tutorial',//使用するDB名に変更
</span><span class='line'>  'prefix' =&gt; '',
</span><span class='line'>  //'encoding' =&gt; 'utf8',
</span><span class='line'>);
</span><span class='line'>
</span><span class='line'>public $test = array(
</span><span class='line'>  'datasource' =&gt; 'Database/Mysql',
</span><span class='line'>  'persistent' =&gt; false,
</span><span class='line'>  'host' =&gt; 'localhost',
</span><span class='line'>  'login' =&gt; 'dbuser',//DBのユーザ名(テスト用)
</span><span class='line'>  'password' =&gt; 'dbuser',//パスワード(テスト用)
</span><span class='line'>  'database' =&gt; 'tutorial_test',//使用するDB名に変更(テスト用)
</span><span class='line'>  'prefix' =&gt; '',
</span><span class='line'>  //'encoding' =&gt; 'utf8',
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p>次にDBを作成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant ssh //仮想サーバにログイン
</span><span class='line'>mysql -u root -p //パスワードは初期だとなし
</span><span class='line'>create database tutorial
</span><span class='line'>create database tutorial_test
</span><span class='line'>grant all on tutorial.* to dbuser@localhost identified by 'dbuser';
</span><span class='line'>exit
</span><span class='line'>
</span><span class='line'>mysql -u dbuser -p //パスワードはdbuser
</span><span class='line'>show databases; //tutorialが見えればOK</span></code></pre></td></tr></table></div></figure>


<h2>Debug_kitをダウンロードする</h2>

<p>下記コマンドを入力します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd app/Plugin
</span><span class='line'>git clone git@github.com:cakephp/debug_kit.git</span></code></pre></td></tr></table></div></figure>


<p><code>app/Config/bootstrap.php</code>に<code>CakePlugin::load('DebugKit');</code>という記述を追加します。</p>

<p>また、<code>app/Controller/AppController.php</code>に下記内容を追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class AppController extends Controller {
</span><span class='line'>    public $components = array('DebugKit.Toolbar'); // この行の追加
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以上でCakePHPを使用する準備が整いました。
あとは、[ブログチュートリアル]な(<a href="http://book.cakephp.org/2.0/ja/getting-started.html">http://book.cakephp.org/2.0/ja/getting-started.html</a>)どを参考に勉強していくのがよいですね！</p>

<p>なお、この時点で<code>http://dev.cakephp-test.com/tutorial/</code>にアクセスしたときに下記のようなメッセージが表示されている場合は、以下のことを行ってみてください。</p>

<p>メッセージ：URL rewriting is not properly configured on your server.  1) Help me configure it 2) I don&rsquo;t / can&rsquo;t use URL rewriting</p>

<p><code>httpd.conf</code>を編集します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vi /etc/httpd/conf/httpd.conf
</span><span class='line'>
</span><span class='line'>//下記部分を編集します。
</span><span class='line'>&lt;Directory /&gt;
</span><span class='line'>    Options FollowSymLinks
</span><span class='line'>    AllowOverride All //ここ
</span><span class='line'>#    Order deny,allow
</span><span class='line'>#    Deny from all
</span><span class='line'>&lt;/Directory&gt;
</span></code></pre></td></tr></table></div></figure>


<p>次に、作業ディレクトリ(今回の場合、tutorial)に<code>.htaccess</code>ファイルを作成します。
そして、下記内容を記述します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;IfModule mod_rewrite.c&gt;
</span><span class='line'>   RewriteEngine on
</span><span class='line'>   RewriteRule    ^$ app/webroot/    [L]
</span><span class='line'>   RewriteRule    (.*) app/webroot/$1 [L]
</span><span class='line'>&lt;/IfModule&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atomでパッケージ管理]]></title>
    <link href="http://kino0104.github.io/blog/2015/06/07/atom-package/"/>
    <updated>2015-06-07T21:20:29+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/06/07/atom-package</id>
    <content type="html"><![CDATA[<p>最近、Atomを使用するようになりました。
いくつかパッケージをインストールしてみたりしたのですが、他の環境でAtomを使用するようになったときのことを考えてパッケージ管理をどのようにできるのか調べてみました。</p>

<!-- more -->


<p>Atomでは、パッケージをStarというもので管理することができます。
気に入ったパッケージにStarという目印をつけておくことができるものですが、インストールして使用しているパッケージにこのStarをつけておきます。このStarをつけたものだけをインストールすることがコマンドで簡単に実行できます。</p>

<p>Starを使用するためには、<a href="https://atom.io/">Atom</a>にアクセスして、
Sign inする必要があります。
Sign in後に自分のページに行くと、API tokenという値が記載されていますので、copyします。</p>

<p>また、ターミナルからatomのパッケージなどをインストールできるので、Atomエディタを開き、メニューバーの[Atom] > [Install Shell Commands]からatomコマンドとapmコマンドをインストールしておくと便利です。</p>

<p>ターミナルでatom関連のコマンドが実行できるようになったら、下記コマンドでstarをつけます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apm star &lt;package名&gt;</span></code></pre></td></tr></table></div></figure>


<p>Starが付いているパッケージは、Atomの自分のページで確認できますし、
下記のコマンドでも確認可能です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apm stars</span></code></pre></td></tr></table></div></figure>


<p>また、starを消したい場合は、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apm unstar &lt;package名&gt;</span></code></pre></td></tr></table></div></figure>


<p>そして、starをつけたパッケージ全てをインストールしたい場合は、下記のように入力します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apm stars --install</span></code></pre></td></tr></table></div></figure>


<p>これで、いつでもどこでもどの端末にも同じパッケージをインストールできます！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WindowsでVagrantを使用する]]></title>
    <link href="http://kino0104.github.io/blog/2015/04/14/vagrant-windows/"/>
    <updated>2015-04-14T21:21:56+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/04/14/vagrant-windows</id>
    <content type="html"><![CDATA[<p>Windowsで、かつプロキシ環境下でVagrantを使用するまでの手順です。</p>

<!-- more -->


<h2>VirtualBoxをインストール</h2>

<p>VirtualBoxの<a href="https://www.virtualbox.org/wiki/Downloads">ダウンロードページ</a>よりインストールします。</p>

<h2>Vagrantをインストール</h2>

<p>Vagrantの<a href="https://www.vagrantup.com/downloads.html">ダウンロードページ</a>より
インストールします。</p>

<h2>Boxをダウンロードする</h2>

<p>Boxとは、仮想マシンのテンプレートのことですが、
これをコマンドプロンプトからダウンロードします。</p>

<p>プロキシ環境下の場合は、http_proxyとhttps_proxyに&#8221;プロキシサーバ:ポート番号&#8221;を記述します。</p>

<p>下記のように、コマンドプロンプト上でコマンドを入力します。（プロキシサーバとポートは自身の環境に合わせてください）
※コマンドプロンプトを閉じると、下記設定は無効になります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set http_proxy="http://proxy.example.com:80"
</span><span class='line'>set https_proxy="http://proxy.example.com:80"</span></code></pre></td></tr></table></div></figure>


<p>次に、Boxをダウンロードします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant box add centos64box http://developer.nrel.gov/downloads/vagrant-boxes/CentOS-6.4-x86_64-v20130731.box</span></code></pre></td></tr></table></div></figure>


<h1>仮想マシンを立ち上げる</h1>

<p>ダウンロードが完了したら、仮想マシンを動かしたいフォルダに移動しましょう。</p>

<p>移動後に、<code>vagrantfile</code>という設定ファイルを作成するために下記コマンドを入力します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant init centos64box</span></code></pre></td></tr></table></div></figure>


<p><code>vagrantfile</code>をテキストエディタで開き、private_networkと書かれたところを検索します。
ip：&#8221;192.168.33.10&#8221;と書いてある行の#を削除します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  # Create a private network, which allows host-only access to the machine
</span><span class='line'>  # using a specific IP.
</span><span class='line'>   config.vm.network "private_network", ip: "192.168.33.10" //この行の#を削除</span></code></pre></td></tr></table></div></figure>


<p>次に、下記コマンドで仮想マシンを起動します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant up</span></code></pre></td></tr></table></div></figure>


<h2>仮想マシンに接続する</h2>

<p>先ほど、<code>vagrantfile</code>の設定で、<code>ip: "192.168.33.10"</code>を有効にしました。
私の環境では、TeraTermというソフトが入っていますので、このソフトを用いてssh接続します。
（ssh接続できれば他のソフトでも大丈夫かと思います。）</p>

<p>TeraTermでホスト欄に<code>192.168.33.10</code>を入力します。
ユーザ名とパスワードは<code>vagrant</code>でログインすることができます。</p>

<p>ここまででVagrantを使用できる環境になりましたので、
この後、Apacheだとかを色々インストールして使ってみてください。</p>

<p>以上、簡単ではありますが、
Windows環境でVagrantを使用する手順をご紹介しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配列関連のアルゴリズム]]></title>
    <link href="http://kino0104.github.io/blog/2015/04/12/algorithm-array/"/>
    <updated>2015-04-12T22:46:29+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/04/12/algorithm-array</id>
    <content type="html"><![CDATA[<p>アルゴリズムの勉強をするために、<a href="http://www.amazon.co.jp/%E3%80%8C%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%80%8D%E3%81%AE%E3%82%AD%E3%83%9B%E3%83%B3-%E3%82%A4%E3%83%81%E3%83%90%E3%83%B3%E3%82%84%E3%81%95%E3%81%97%E3%81%84%E7%90%86%E5%B7%A5%E7%B3%BB%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E6%9D%89%E6%B5%A6-%E8%B3%A2/dp/4797360690">「アルゴリズム」のキホン</a>という本を読んでいます。
わかりやすい本なのでアルゴリズムを学び始めるのよいかなと思います。</p>

<p>本の中では、言葉と図によって、アルゴリズムが説明されていますので、
PHPのコードを記述して自分の中にしっかりと落とし込んでいきたいと思います。</p>

<!-- more -->


<h2>配列データの要素数を求める</h2>

<p>PHPですと、count()関数を使用することによって、
ほしい情報を得ることができますが、考え方を理解することも重要かと思います。</p>

<p>配列データの最後に番兵データを格納することで要素数を数える方法が紹介されていました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//数を数えたい配列
</span><span class='line'>$arr = array(20, 5, 60, 48, 12, 30);
</span><span class='line'>
</span><span class='line'>//番兵データとして、配列データになり得ない値を配列の最後に格納
</span><span class='line'>$arr[] = -1;
</span><span class='line'>
</span><span class='line'>//要素数を数えるための変数countを値0で初期化する
</span><span class='line'>$count = 0
</span><span class='line'>
</span><span class='line'>//番兵データと等しくなるまで変数countをカウントアップする
</span><span class='line'>for($i=0;$arr[$i]!=-1;$i++){
</span><span class='line'>  $count++;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>echo $count;
</span><span class='line'>//出力結果:6</span></code></pre></td></tr></table></div></figure>


<h2>配列データ内の最大値を求める</h2>

<p>配列データ内の最大値の求め方は、最大値を保持する変数を用意して、配列内のデータを順番に比較していきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//配列arr内の最大値を求める
</span><span class='line'>$arr = array(20, 5, 60, 48, 12, 30);
</span><span class='line'>
</span><span class='line'>//最大値を保持する変数を用意する。このとき、対象データが取りうる値よりも小さい値で初期化
</span><span class='line'>$max = -1;
</span><span class='line'>//配列データと最大値保持変数maxを比べて、配列データが大きかった場合、その値を$maxに格納する
</span><span class='line'>for($i=0;$i&lt;count($arr);$i++){
</span><span class='line'>  if($arr[$i] &gt; $max){
</span><span class='line'>      $max = $arr[$i];
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>echo $max;
</span><span class='line'>//出力結果:60</span></code></pre></td></tr></table></div></figure>


<p>今はソートのアルゴリズムについて書かれた章を読んでいますので、
またコードに落としていきたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yumやwgetをプロキシサーバ経由で使用する]]></title>
    <link href="http://kino0104.github.io/blog/2015/04/10/proxy-yum-wget/"/>
    <updated>2015-04-10T22:59:58+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/04/10/proxy-yum-wget</id>
    <content type="html"><![CDATA[<p>社内でサーバを立てていて、wgetとかyumとかで色々インストールしようと思ったら、ダウンロードできませんでした。
まぁ、プロキシサーバがあるので、プロキシ経由で使用できるように設定が必要なのは当然なのですが、
今回は設定方法の紹介です。</p>

<!-- more -->


<h2>wgetの設定</h2>

<p>まずは下記コマンドを実行します。
※なければnew fileとして作成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi ~/.wgetrc</span></code></pre></td></tr></table></div></figure>


<p>そして、下記内容を記述します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http_proxy=http://プロキシサーバ:ポート番号
</span><span class='line'>
</span><span class='line'>//認証が必要であれば下記も記述する
</span><span class='line'>proxy_user=username
</span><span class='line'>proxy_password=password</span></code></pre></td></tr></table></div></figure>


<h2>yumの設定</h2>

<p>下記コマンドを実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi /etc/yum.conf</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>proxy=http://プロキシサーバ:ポート番号</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xlsxファイルをダウンロードしようとしたらzipがダウンロードされた]]></title>
    <link href="http://kino0104.github.io/blog/2015/04/01/apache-mimetype-xlsx/"/>
    <updated>2015-04-01T21:43:22+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/04/01/apache-mimetype-xlsx</id>
    <content type="html"><![CDATA[<p>タイトル通りですが、サーバ上にxlsxファイルを置いてHTMLのリンクからダウンロードしようとしたら、zipファイルでダウンロードされました。
その対処方法について記述します。</p>

<!-- more -->


<h2>対処方法</h2>

<p><code>.htaccess</code>か<code>mime.types</code>のいずれかにMIMEタイプを追記する必要があります。</p>

<p><code>.htaccess</code>の場合は、下記内容を追記します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AddType application/vnd.openxmlformats .docx .pptx .xlsx</span></code></pre></td></tr></table></div></figure>


<p>.htaccessがなかったり、このファイルを作成したくない場合は<code>mime.types</code>に追記します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>application/vnd.openxmlformats-officedocument.wordprocessingml.document  docx
</span><span class='line'>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet xlsx
</span><span class='line'>application/vnd.openxmlformats-officedocument.presentationml.presentatio pptx</span></code></pre></td></tr></table></div></figure>


<p><code>.htaccess</code>か<code>mime.types</code>がどこにある川からない場合は、下記コマンドで探しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//mime.type野場合
</span><span class='line'>find / -name mime.types</span></code></pre></td></tr></table></div></figure>


<p>また、追記する前に編集前のファイルはコピーしておきましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp mime.types mime.types.origin</span></code></pre></td></tr></table></div></figure>


<p>追記した後は、apacheを再起動する必要があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service httpd restart</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プログラムはこうして作られる、を読んでみた]]></title>
    <link href="http://kino0104.github.io/blog/2015/03/31/program-builtup-bookrv/"/>
    <updated>2015-03-31T22:21:18+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/03/31/program-builtup-bookrv</id>
    <content type="html"><![CDATA[<p>「プログラムはこうして作られる」という本を読みました。
いや、読んでいます。
まだ、読み切ってないので、タイトルに語弊はありますが、途中まで読んだ段階でメモ書きも含めて役に立ったところを書いていきたいと思います。
内容としては、著者である平山尚さんが作成したSunabaという言語を使用して、テトリスを作ってみようというものです。
あの有名なゲームであるテトリスって、どうやって考えて作られているの？というのがわかります。</p>

<!-- more -->


<h2>プログラムは思ったようには動かない。書いたように動く</h2>

<p>プログラムを書いて動かないとき、この考え方をしっかりする必要があります。
当たり前なようで、プログラミング初心者はなかなか意識できていないことではないでしょうか。</p>

<p>何かプログラムを書いて、意図しない画面表示になったときは自分が書いたプログラムがそのようになっています。
なぜ動かないんだ！と苛立ってしまったりすることがあると思います。
自分もハマってイライラしてしまうことがあり、そういうときは冷静に考えられないので、余計解決に時間がかかるという負のスパイラルになっていきます。</p>

<h2>結果から考える</h2>

<p>書いたように動く、と先ほど当たり前のことを書きました。</p>

<p>うまく動かないとなったときに、書いたプログラムとにらめっこするのではなく、
その挙動が起こうる状態はどんなときか考える、推理しようということが書かれています。</p>

<p>例えば、以下のようなコードを見てください。
ほしい結果は下記の通りですが、これを実行して得られる結果は#が1行に5つ表示されるという結果になります。
このとき、1行しか表示されないのはどんなときか考えることを推奨しています。</p>

<p>４行分繰り返していないのか、そもそも#が5つしか表示されないコードになっているのか、と言ったことが考えられると思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>for($i=0;$i&lt;4;$i++){
</span><span class='line'>  for($i=0;$i&lt;5;$i++){
</span><span class='line'>      echo "#";
</span><span class='line'>  }
</span><span class='line'>  echo "&lt;br&gt;";
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//ほしい結果
</span><span class='line'>#####
</span><span class='line'>#####
</span><span class='line'>#####
</span><span class='line'>#####
</span><span class='line'>
</span><span class='line'>//得られる結果
</span><span class='line'>#####</span></code></pre></td></tr></table></div></figure>


<p>得られた結果から、推理し、原因を追求していくということが大切だと書いてありました。</p>

<h2>思ったように書くための3つの思考</h2>

<p>今こういう結果である以上、プログラムはこうなっているはずだ、と考えて間違いを推理する。
また、ほしい結果を得るために満たすべき条件は○○だが、満たされているか、を合わせて考える。</p>

<p>これらをふまえた上で、以下の3つの思考をしましょうということが謳われています。</p>

<ul>
<li>動かしてみて、理想と現実がどう違うのかを把握する</li>
<li>このような現実になっているのはなぜかを考える</li>
<li>理想と現実を一致させるために必要なものは何かを考える</li>
</ul>


<p>「どう間違っている必要があるかを考える」ということは、自分の中でもしっかりと意識していきたいと思います。</p>

<h2>機能を知ることより、その機能が目的を果たすかを納得すること</h2>

<p>実現したいことのために、こんなことができたらよいなと考えに考え尽くした上で、機能を知ることにより、
どの場面でそれを使うべきかというのが自分のものとして理解できるというような内容が書かれていました。</p>

<p>確かに、今知っている自分の知識で、やりたいことを実現しようとして、「なんかコードが長過ぎる」「手間がかかりすぎる」となってから、機能を知るというのは重要かなと思います。</p>

<p>やりたいことをネットで探せば、ある程度近い内容のコードがあったりして、そういったものを繋ぎ合わせるだけで、動くものが作れたりもする場合があります。
しかし、この本では、自分で考えていくことの大切さはもちろんのこと、自分で考えるためにどうすればよいか、テトリスという題材を元に思考の掘り下げ方を教えてくれました。
実際にSunabaという言語を用いて、書いていくことが良いとは思いますが、本を読むだけでも参考になる点があるので、プログラミング初心者の方にはオススメの本です。</p>

<p>また、読み終わった後に、自分が勉強している言語でテトリスを作ってみるのがよいかなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitトラブルシューティング]]></title>
    <link href="http://kino0104.github.io/blog/2015/03/30/git-trouble-shooting/"/>
    <updated>2015-03-30T16:05:57+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/03/30/git-trouble-shooting</id>
    <content type="html"><![CDATA[<p>Gitを使用してる中で出会ったエラーとその対処方法について、忘れたときのメモとして残していきます。</p>

<!-- more -->


<h2>目次</h2>

<pre><code>1.git pushでrejectされた場合
</code></pre>

<h2>1.git pushでrejectされた場合</h2>

<p><code>git push origin master</code>など<code>git push</code>したら、下記のようなメッセージが表示されてpushできないということがありました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ! [rejected]        master -&gt; master (non-fast-forward)</span></code></pre></td></tr></table></div></figure>


<p>自分が変更した内容をpushしようとしたのですが、他の人がpushして自分のローカルがリモート先よりも古くなっている場合にこのメッセージが表示されます。
よって、まずはリモート内容を自分のローカル(origin/master)に取り入れて、マージする必要があります。
そのあとで、pushすることができるようになります。</p>

<p>肝心のこの状態を脱却するためのコマンドは以下の通りです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git fetch && git merge origin/master</span></code></pre></td></tr></table></div></figure>


<p>他にもgit関連でエラーとかが発生したら、ここに追記していきたいと思います。
不明点や間違いがありましたら、コメントいただければと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopressを使う]]></title>
    <link href="http://kino0104.github.io/blog/2015/03/26/octopress-install/"/>
    <updated>2015-03-26T19:56:55+09:00</updated>
    <id>http://kino0104.github.io/blog/2015/03/26/octopress-install</id>
    <content type="html"><![CDATA[<p>Octopressを使って無料ブログを作成しましたので、その手順を説明します。
エディタとgitで管理できるので、便利かなーと思い、導入してみました。
この記事がOctopressで書く初めての記事になります。</p>

<!-- more -->


<h2>目次</h2>

<pre><code>1. Githubでリポジトリ作成
2. Octopressのインストール
3. Octopressの初期設定
4. 記事を投稿する
5. 記事の中に画像を使う
6. デプロイする
</code></pre>

<h2>1. Githubでリポジトリ作成</h2>

<p>最初にGithubへログインして、リポジトリを作成します。
リポジトリ名は<code>username.github.io</code>とします。
usernameはGithubのユーザ名を入れます。</p>

<p><img src="http://kino0104.github.io/images/2015-03-26-octopress-install/octopress1.png" alt="octopress" /></p>

<h2>2. Octopressのインストール</h2>

<p>次に、作業ディレクトリに移動して、OctopressをGithubからクローンします。
usernameはGithubのユーザ名を入れます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /work/blog
</span><span class='line'>git clone git@github.com:imathis/octopress.git username.github.io</span></code></pre></td></tr></table></div></figure>


<p>bundlerをインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler</span></code></pre></td></tr></table></div></figure>


<p>必要なgemをインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install --path vendor/bundle --jobs=4</span></code></pre></td></tr></table></div></figure>


<h2>3. Octopressの初期設定</h2>

<p>GitHub Pageに表示するために、下記コマンドを入力します。
usernameはGithubのユーザ名を入れます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake setup_github_pages
</span><span class='line'>
</span><span class='line'>Enter the read/write url for your repository
</span><span class='line'>//リポジトリのURLを聞かれるので、git@github.com: username/username.github.com.gitと入力
</span><span class='line'>Repository url: </span></code></pre></td></tr></table></div></figure>


<p>次に、_config.ymlを編集します。
この中には、ブログのタイトルやサブタイトル、著者情報などを記述します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>url:                # For rewriting urls for RSS, etc
</span><span class='line'>title:              # Used in the header and title tags
</span><span class='line'>subtitle:           # A description used in the header
</span><span class='line'>author:             # Your name, for RSS, Copyright, Metadata
</span><span class='line'>simple_search:      # Search engine for simple site search
</span><span class='line'>description:        # A default meta description for your site
</span><span class='line'>date_format:        # Format dates using Ruby's date strftime syntax
</span><span class='line'>subscribe_rss:      # Url for your blog's feed, defauts to /atom.xml
</span><span class='line'>subscribe_email:    # Url to subscribe by email (service required)
</span><span class='line'>category_feeds:     # Enable per category RSS feeds (defaults to false in 2.1)
</span><span class='line'>email:              # Email address for the RSS feed if you want it.</span></code></pre></td></tr></table></div></figure>


<h2>4. 記事を投稿する</h2>

<p>ここまで完了したら、さっそくブログ記事を作成してみます。
まずは記事のテンプレートを作成するために、下記コマンドを実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake new_post
</span><span class='line'>Enter a title for your post: //記事のタイトルを入力(この記事はoctopress-install)</span></code></pre></td></tr></table></div></figure>


<p>Enter a title for your postで入力するタイトルはパーマリンクになるので、英語で記述する必要があります。</p>

<p><code>source/_posts/2015-03-26-title.markdown</code>というようなテンプレートが生成されますので、エディタで開いて編集します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "title"
</span><span class='line'>date: 2015-03-26 19:56:55 +0900
</span><span class='line'>comments: true
</span><span class='line'>categories: [category1, category2,...]
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>//記事の内容をいかに書いていく</span></code></pre></td></tr></table></div></figure>


<p>記事のタイトルやカテゴリーを入力します。ここでのタイトルは日本語で問題ありません。</p>

<p>記事を書いたら、以下のコマンドでプレビュー表示して確認してみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>実行後に、<code>http://localhost:4000</code>にアクセスすると、
プレビューを確認できます。</p>

<h2>5. 記事の中に画像を使う</h2>

<p>記事を書いていると、画像を使いたい場合があります。
Octopressでは、画像は<code>source/images</code>に保存します。
ただ、imagesディレクトリに直接画像ファイルを置くと、わけがわからなくなるので、例えば、記事のタイトルと同じディレクトリを用意して、その中に画像ファイルを格納します。</p>

<p>今回で言うと、<code>/images/2015-03-26-octopress-install/</code>です。
octopress1.pngをここに保存しておきます。</p>

<p>Markdown記法では、画像は下記のように指定します。</p>

<pre><code>![代替テキスト](画像のURL)
</code></pre>

<p>公式(<a href="http://octopress.org/docs/plugins/image-tag/">Image Tag</a>)では、
下記の書き方が紹介されています。</p>

<pre><code>&lt;img class="[class names]" src="http://kino0104.github.io/path/to/image" title="[width] [height] [title text [alt text]]" &gt;
</code></pre>

<p>また、画像の指定は、相対指定と絶対指定があります。
この記事で一番はじめに登場する画像は下記の相対指定で書いています！</p>

<pre><code>相対指定:/images/2015-03-26-octopress-install/octopress1.png
絶対指定:http://kino0104.github.io/images/2015-03-26-octopress-install/octopress1.png
</code></pre>

<h2>6. デプロイする</h2>

<p>最後にデプロイして、記事投稿完了です。
途中、Githubのユーザ名とパスワードを入力する必要があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake deploy
</span><span class='line'>
</span><span class='line'>## Pushing generated _deploy website
</span><span class='line'>Username for 'https://github.com': 
</span><span class='line'>Password for 'https://username@github.com': </span></code></pre></td></tr></table></div></figure>


<p>簡単ではありますが、Octopressでのブログ作成手順でした。
不明点や間違いがありましたら、コメントいただければと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitコマンドまとめ]]></title>
    <link href="http://kino0104.github.io/tool/git-command/"/>
    <updated>2015-03-02T05:40:57+09:00</updated>
    <id>http://kino0104.github.io/tool/git-command</id>
    <content type="html"><![CDATA[<p>Gitはファイルを作成したり、変更したりしたときの履歴をバージョン管理できます。<br/>
以下、3つのエリアを用いて管理していきます。
1.作業ディレクトリ<br/>
2.ステージングエリア<br/>
3.リポジトリ</p>

<!-- more -->




<div id="toc_container" class="toc_transparent no_bullets">
  <p class="toc_title">
    - 目次 -
  </p>
  
  <ul class="toc_list">
    <li>
      <a href="#i"><span class="toc_number toc_depth_1">1</span> インストールする</a>
    </li>
    <li>
      <a href="#i-2"><span class="toc_number toc_depth_1">2</span> 使う前の設定</a>
    </li>
    <li>
      <a href="#i-3"><span class="toc_number toc_depth_1">3</span> じゃ、使い始めよう！</a><ul>
        <li>
          <a href="#git"><span class="toc_number toc_depth_2">3.1</span> gitを使用する作業ディレクトリを決める。</a>
        </li>
        <li>
          <a href="#git_add"><span class="toc_number toc_depth_2">3.2</span> ステージングエリアにアップする(git add)</a>
        </li>
        <li>
          <a href="#git_commit"><span class="toc_number toc_depth_2">3.3</span> リポジトリにアップする(git commit)</a>
        </li>
        <li>
          <a href="#git_log"><span class="toc_number toc_depth_2">3.4</span> アップした履歴を見る(git log)</a>
        </li>
        <li>
          <a href="#git_status"><span class="toc_number toc_depth_2">3.5</span> 現在の状態を確認する(git status)</a>
        </li>
        <li>
          <a href="#git_diff"><span class="toc_number toc_depth_2">3.6</span> 差分を確認する(git diff)</a>
        </li>
        <li>
          <a href="#i-4"><span class="toc_number toc_depth_2">3.7</span> 管理下に含めたくないファイル</a>
        </li>
        <li>
          <a href="#i-5"><span class="toc_number toc_depth_2">3.8</span> 直前のコミットを微修正する</a>
        </li>
        <li>
          <a href="#i-6"><span class="toc_number toc_depth_2">3.9</span> 過去のバージョンから戻る</a>
        </li>
        <li>
          <a href="#i-7"><span class="toc_number toc_depth_2">3.10</span> ブランチ(分岐)を使う</a>
        </li>
        <li>
          <a href="#i-8"><span class="toc_number toc_depth_2">3.11</span> ブランチをマージする</a>
        </li>
        <li>
          <a href="#i-9"><span class="toc_number toc_depth_2">3.12</span> マージの衝突を解決する</a>
        </li>
        <li>
          <a href="#i-10"><span class="toc_number toc_depth_2">3.13</span> タグを使う</a>
        </li>
        <li>
          <a href="#git-2"><span class="toc_number toc_depth_2">3.14</span> エイリアスを使う(gitコマンドを短縮して使う)</a>
        </li>
        <li>
          <a href="#i-11"><span class="toc_number toc_depth_2">3.15</span> 共有リポジトリを使って作業する</a>
        </li>
        <li>
          <a href="#i-12"><span class="toc_number toc_depth_2">3.16</span> その他便利なコマンド</a><ul>
            <li>
              <a href="#git_rebase"><span class="toc_number toc_depth_3">3.16.1</span> 便利なマージ方法(git rebase)</a>
            </li>
            <li>
              <a href="#i-13"><span class="toc_number toc_depth_3">3.16.2</span> 相対リファレンス</a>
            </li>
          </ul>
        </li>
      </ul>
    </li>
    
    <li>
      <a href="#i-14"><span class="toc_number toc_depth_1">4</span> 参考になる学習サイト</a>
    </li>
  </ul>
</div>


<h2><span id="i">インストールする</span></h2>

<pre><code>$ yum install git
</code></pre>

<h2><span id="i-2">使う前の設定</span></h2>

<p>使用始める前に、user名とemailの設定する必要があるので、<br/>
下記コマンドから登録します。</p>

<pre><code>git config --global user.name "user名"
git config --global user.email "mail adress"
git config --global color.ui true
</code></pre>

<p>上記設定内容は下記のコマンドで確認できます。</p>

<pre><code>git config -l
</code></pre>

<h2><span id="i-3">じゃ、使い始めよう！</span></h2>

<h3><span id="git">gitを使用する作業ディレクトリを決める。</span></h3>

<p>この作業ディレクトリ内に作ったディレクトリやファイルが管理対象となります。</p>

<pre><code>//作業ディレクトリdirに移動
$ cd dir/
//一応、移動がちゃんとできているか現在のディレクトリ位置を確認
$ pwd
/home/vagrant/dir
//gitを使用する
git init
</code></pre>

<h3><span id="git_add">ステージングエリアにアップする(git add)</span></h3>

<p>作業ディレクトリにindex.htmlを作成したとします。
これをステージングエリアにアップしてみます。</p>

<pre><code>//index.htmlをアップする
$ git add index.html

//今のディレクトリとその配下にあるファイルを全部アップする
$ git add . 
</code></pre>

<h3><span id="git_commit">リポジトリにアップする(git commit)</span></h3>

<p>次に、リポジトリにアップしてみよう</p>

<pre><code>//実行後にメッセージを入力することになるので、変更点等を簡潔に入力します。
$ git commit

//メッセージが簡単に書いてcommitする
$ git commit -m "index.html modified"
</code></pre>

<h3><span id="git_log">アップした履歴を見る(git log)</span></h3>

<p>今、ステージングエリアとリポジトリにファイルをアップしました。<br/>
その履歴を見てみます。</p>

<pre><code>$ git log

//さらにコンパクトにlogを見る
$ git log --oneline

//どの場所が変更されたのか見る
$ git log -p

//どのファイルが何カ所変更されたか見る
$ git log -stat
</code></pre>

<h3><span id="git_status">現在の状態を確認する(git status)</span></h3>

<p>ファイルを作成したり、修正したりして、<br/>
今、index.htmlはステージングエリアにアップしてたっけ？<br/>
リポジトリにアップしたっけ？とわからなくなることがあります。<br/>
そんなときは、現在の状態を確認するコマンドを入力します。</p>

<pre><code>$ git status

# On branch master
# Changed but not updated: //まだステージングにもリポジトリにもアップされてない。
#   (use "git add &lt;file&gt;..." to update what will be committed) 
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory) 
#
#  modified:   index.html //index.htmlが変更されていることがわかる
#
</code></pre>

<h3><span id="git_diff">差分を確認する(git diff)</span></h3>

<p>ファイルの差分を確認します。</p>

<pre><code>//ステージに上がっていないファイルの変更点を確認
$ git diff

//ステージに上がっているファイルが次のcommitでどこが変更されるか確認
$ git diff --cached
</code></pre>

<p>ファイルを操作します(削除や移動など)</p>

<pre><code>//移動
$ git mv index.html
//削除
$ git rm index.html
</code></pre>

<h3><span id="i-4">管理下に含めたくないファイル</span></h3>

<p>git管理下となった作業ディレクトリでも管理したくないファイルがあると言ったときは「.gitignore」を使用します。</p>

<p>.gitignoreを置いたディレクトリ及び配下のディレクトリが適用対象になります。</p>

<pre><code>$ vi .gitignore


//ログファイルは管理しない記述。管理したくないものを記述する
*.log
</code></pre>

<h3><span id="i-5">直前のコミットを微修正する</span></h3>

<p>commitしたあとに、微々たる修正をしたい。つまり、git logで履歴を載せて管理するほどの修正ではない&#8230;というときに使うコマンド。</p>

<pre><code>//直前のコミットを変更(commitログには表示しない。ちょっとした変更)
$ git commit --amend
</code></pre>

<h3><span id="i-6">過去のバージョンから戻る</span></h3>

<p>resetとrevertがあります。<br/>
resetはなかったことにする。revertは巻き戻すというイメージ。<br/>
resetは履歴に残らないが、revertは履歴に残ります。</p>

<pre><code>// git addしたあとに一つ前の状態に戻る
$ git reset --hard HEAD

//　git addしたあとに2つ前の状態に戻る
$ git reset --hard HEAD^
$ git reset --hard [commitの番号指定でも良い]

//戻ったのを取り消す(ORIG_HEADに１つ前の状態が保存される)
$ git reset --hard ORIG_HEAD

git reset ブランチのポインタを後方へ移動。履歴の上書き

git revert HEAD
</code></pre>

<h3><span id="i-7">ブランチ(分岐)を使う</span></h3>

<p>初めはmasterしかない。<br/>
ちょっとコードを変えて試してみたいときに、大元のmasterブランチで作業するのではなく、もう一つブランチを作成して、そちらでコードを修正する。良い感じのコードが書ければ、あとからmasterブランチに統合するといった使い方をします。</p>

<pre><code>$ git branch
* master

// hogeブランチを作成する
git branch hoge
  hoge
* master

//今いるブランチは*が付いている方
//ブランチを移動する
$ git checkout hoge
$ git branch
* hoge
master

//ブランチの作成と作成したブランチに移動を一気にやる
$ git checkout -b hoge
</code></pre>

<h3><span id="i-8">ブランチをマージする</span></h3>

<p>先に記述したように、分岐したブランチで良い感じのコードが書けたので、masterに統合するコマンド。</p>

<pre><code>$ git merge hoge

//mergeしたあとに、作成したブランチいらないから削除する
$ git branch -d hoge
</code></pre>

<h3><span id="i-9">マージの衝突を解決する</span></h3>

<p>衝突とは、ブランチ1でindex.htmlを編集し、commitしたあと、<br/>
masterブランチでもindex.htmlを編集し、commit。<br/>
そのあと、ブランチ1をマージしようとした。というケースです。
異なるブランチで同じファイルが修正されているため、どちらのコードを正とするのか決める必要があります。</p>

<pre><code>//衝突が起きたファイルをviコマンドで開き、必要なコードだけを残し、保存する
$ vi index.html
</code></pre>

<h3><span id="i-10">タグを使う</span></h3>

<p>タグと言うものをつけて、履歴を管理することもできます。<br/>
git logで見たときにcommit d96bc437694&#8230;.というidでも色々操作できるがわかりにくいですよね。</p>

<pre><code>commit d96bc43769409df0aa9b46614fe2a0a23b9ca5dc //これわかりにくい
Author: user名 &lt;mail address&gt;
Date:   Sat Feb 28 12:20:13 2015 +0000

    test commit


//commitしたあとに、v1.0というtagをつける
$ git tag v1.0

//tagの一覧を見る
$ git tag
v1.0

//tagで変更履歴を見ることができる
$ git show v1.0

//直近のcommitじゃないものにタグをつける
$ git tag v0.9 [commit id]

//tagを削除
$ git tag -d v0.9
</code></pre>

<h3><span id="git-2">エイリアスを使う(gitコマンドを短縮して使う)</span></h3>

<p><code>git checkout</code>と入力するのは長いので、<code>git co</code>とする、みたいなことができます。</p>

<pre><code>$ git config --global alias.[短縮名] [コマンド]
$ git config --global alias.co checkout

//作ったエイリアス一覧を見るには
$ git config -l
</code></pre>

<h3><span id="i-11">共有リポジトリを使って作業する</span></h3>

<p>共有リポジトリsharedrepo.gitというものがあり、そこに複数人の作業者がファイルをアップしていきます。
AさんはAdirディレクトリを使用<br/>
BさんはBdirディレクトリを使用しているものとします。</p>

<pre><code>//共有リポジトリを作成
mkdir sharedrepo.git
cd sharedrepo.git/
git init --bare  //ファイルのコミットはしない


//Aさんの作業はまずは別（共有）のリポジトリを登録すること
$ git remote add origin ~/sharedrepo.git

//何がリモートで接続されているかは下記コマンドで確認
$ git config -l
</code></pre>

<p>共有リポジトリにpush</p>

<pre><code>//originにmasterの内容をpushする
$ git push origin master
</code></pre>

<p>Bさんが共有リポジトリの中身をBdirディレクトリに持っていきます。</p>

<pre><code>$ git clone ~/sharedrepo.git/ Bdir
</code></pre>

<p>Bさんがファイルを変更して共有リポジトリにアップしたあとに、<br/>
Aさんが変更されたファイルを自分の作業エリアに引っ張ってくる。</p>

<pre><code>$ git pull origin master
</code></pre>

<h3><span id="i-12">その他便利なコマンド</span></h3>

<h4><span id="git_rebase">便利なマージ方法(git rebase)</span></h4>

<p>ブランチを使用して修正をしていった際、最終的にマージして統合することになるかと思いますが、rebaseを使用すると履歴を一本化できる。<br/>
ブランチで分岐させて開発したのではなく、最初からmasterでだけ開発していたかのような履歴の残り方になるイメージ。</p>

<p>mergeの場合はあくまで分岐して統合された状態。</p>

<pre><code>//hogeの内容をmasterに移動させるため、まずはhogeにチェックアウト
$ git checkout hoge
*hoge
 master

//masterにrebaseする
$git rebase master
</code></pre>

<h4><span id="i-13">相対リファレンス</span></h4>

<p>ブランチを使用して作業をしていると、前のコミットに戻りたいという場合、あるコミットからの相対位置で指定することができます。</p>

<p>・一つずつ上に移動する<sup>カレット</sup><br/>
・複数回上に移動する~num<br/>
HEADは現在使用しているブランチの先頭。このHEADを移動することで使用するブランチを変更します。</p>

<p>masterブランチをHEADより親３世代前へ移動します</p>

<pre><code>git branch -f master HEAD~3
</code></pre>

<h2><span id="i-14">参考になる学習サイト</span></h2>

<p>まだまだたくさんコマンドがあるので、参考になるサイトを下記に列挙します！</p>

<p><a href="http://dotinstall.com/lessons/basic_git">git入門</a><br/>
<a href="http://pcottle.github.io/learnGitBranching/">LearnGitBranching</a><br/>
<a href="http://www.backlog.jp/git-guide/">サルでもわかるGit入門</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php Security]]></title>
    <link href="http://kino0104.github.io/blog/2014/08/26/php-security/"/>
    <updated>2014-08-26T00:00:00+09:00</updated>
    <id>http://kino0104.github.io/blog/2014/08/26/php-security</id>
    <content type="html"><![CDATA[<div id="toc_container" class="toc_transparent no_bullets">
  <p class="toc_title">
    - 目次 -
  </p>
  
  <ul class="toc_list">
    <li>
      <a href="#htmlspecialchars"><span class="toc_number toc_depth_1">1</span> htmlspecialchars関数</a><ul>
        <li>
          <a href="#i"><span class="toc_number toc_depth_2">1.1</span> 対策</a>
        </li>
      </ul>
    </li>
    
    <li>
      <a href="#CSRF"><span class="toc_number toc_depth_1">2</span> クロスサイトリクエストフォージェリ（CSRF）対策</a><ul>
        <li>
          <a href="#CSRF-2"><span class="toc_number toc_depth_2">2.1</span> CSRFとはなんぞや？</a>
        </li>
        <li>
          <a href="#i-2"><span class="toc_number toc_depth_2">2.2</span> 対策</a>
        </li>
      </ul>
    </li>
    
    <li>
      <a href="#i-3"><span class="toc_number toc_depth_1">3</span> セッションハイジャック</a><ul>
        <li>
          <a href="#i-4"><span class="toc_number toc_depth_2">3.1</span> セッションハイジャックとはなんぞや？</a>
        </li>
        <li>
          <a href="#i-5"><span class="toc_number toc_depth_2">3.2</span> 対策は？</a>
        </li>
      </ul>
    </li>
  </ul>
</div>


<p>現在、Webサービスを作成しようと奮闘中です。<br/>
おそらく、セキュリティ対策という話をすると、色々と考慮すべきことがあるのだ思いますが、勉強教材にしているドットインストールさんの「ユーザー管理をするWebサービスを作ろう」で話に挙っていたものをまとめました。</p>

<pre><code>htmlspecialchars関数
クロスサイトリクエストフォージェリ（CSRF）対策
セッションハイジャック対策
</code></pre>

<h2><span id="htmlspecialchars">htmlspecialchars関数</span></h2>

<p>HTMLには特殊な意味を持つ文字があり、<br/>
その文字をHTMLでの意味としてではなく、文字として表示するための関数。<br/>
フォームなどからの悪意のある入力を無害化し、安全性を高めることができます。<br/>
これを行わないとフォームにHTMLタグを入れることができるため、<br/>
入力・送信された文字列によって、サイトのレイアウトが崩壊したり、ハッキングされたりして危険です。</p>

<h3><span id="i">対策</span></h3>

<pre><code>htmlspecialchars('文字列', 'エスケープ種類', '文字コード');
</code></pre>

<p>ちょっとコードが長いので、この関数を使用するときは、<br/>
下記のようなfunctionを作成しておくと便利。<br/>
こうすることで、エスケープしたい文字があれば、h()を使用すればOKになる。</p>

<pre><code>function h($s){
    return htmlspecialchars($s, ENT_QUOTES, "UTF-8");
}
</code></pre>

<table>
<thead>
<tr>
<th style="text-align:center;">   エスケープ種類    </th>
<th> 説明                       </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">  ENT_COMPAT  </td>
<td> ダブルクォートを置き換える            </td>
</tr>
<tr>
<td style="text-align:center;">  ENT_QUOTES  </td>
<td> ダブルクォート、シングルクォート共に置き換える  </td>
</tr>
<tr>
<td style="text-align:center;"> ENT_NOQUOTES </td>
<td> ダブルクォート、シングルクォート共に置き換えない </td>
</tr>
</tbody>
</table>


<h2><span id="CSRF">クロスサイトリクエストフォージェリ（CSRF）対策</span></h2>

<p>ざっくり一言でいうと、不正なPOSTを防ぐための対策。<br/>
「フォームのある画面が表示されたときにフォームに対して<br/>
トークンと呼ばれるIDを埋め込んでおき、フォームがPOSTされたときに<br/>
設定したトークンと一致しているかを確認する」ということみたいだが、<br/>
なんのこっちゃ意味不明。</p>

<p>ドットインストールさんでも、気になる方は調べてみてねと<br/>
言っていたのでもうちょっと調べてみた。</p>

<h3><span id="CSRF-2">CSRFとはなんぞや？</span></h3>

<p>CSRF（シーサーフ）はリクエスト強要と呼ばれる<br/>
Webアプリケーションの脆弱性の一種だそうで…</p>

<p>例えば、ユーザが掲示板にログインして何かを書き込むという操作は<br/>
ユーザが意図しているため、問題ありません。<br/>
しかし、このCSRFというのは悪意のあるサイト（CSRFが仕掛けられているサイト）にアクセスしただけで、掲示板に勝手に書き込みがされてしまうというもの。</p>

<p>本来であれば、掲示板にログインして、<br/>
そこで入力した書き込みが反映されるというのが正しいですが、<br/>
掲示板以外からの投稿ができてしまうんですねー。<br/>
CSRF対策というのは、こういう外部からのPOSTを防ぐ！<br/>
掲示板からのPOSTのみ受け付ける！ようにするものみたいです。</p>

<h3><span id="i-2">対策</span></h3>

<p>トークンと呼ばれる推測困難な文字列を生成します。</p>

<p>何かしらの情報をPOSTする際、HTMLでformタグを使用することになります。<br/>
このフォームに生成したトークンを非表示で埋め込みます。<br/>
Webアプリケーションにフォームの値が送信される際、このトークンも一緒に送信されます。生成したトークンとPOSTされるトークンが一致していればOKですし、NGであれば不正POSTと見なします。</p>

<p>下記コードが対策になります。</p>

<pre><code>function setToken(){
    //変数tokenに推測困難なID(文字列)を高速に生成する
    $token = sha1(uniqid(mt_rand(), true));
    $_SESSION['token'] = $token;
}

function checkToken(){
    //セッションが空あるいは、POST時されたトークンと異なる場合
    if(empty($_SESSION['token']) || ($_SESSION['token'] != $_POST['token'])){
        echo "不正なPOSTが行われました";
        exit;
    }

    if($_SERVER['REQUEST_METHOD'] != 'POST'){
        //リクエストがPOSTでない場合
        setToken();
    }else{
        //リクエストがPOSTの場合
        checkToken();
}
</code></pre>

<p>以下、フォーム部分。</p>

<pre>//非表示のフォームにトークンをセットする。
<input type="hidden" name="token" value="<?php echo h($_SESSION['token']); ?>" />
</pre>


<h2><span id="i-3">セッションハイジャック</span></h2>

<p>ドットインストールさんでは、決まり事だと思って頂いてといいながら<br/>
下記コードを書いています。</p>

<pre><code>session_regenerate_id(true);
$_SESSION['me'] = $me;
header('Location: http://example.com/index.php');
</code></pre>

<p>詳しくは調べてねという感じなので、これまた調べました。</p>

<h3><span id="i-4">セッションハイジャックとはなんぞや？</span></h3>

<p>利用者がWebサービスにログインしたときにセッションIDを発行して、<br/>
以後ログインするときにセッションIDの情報をもとにログインする。<br/>
これをセッション管理などと呼ぶわけですが、<br/>
何らかの方法でネットワーク上でセッションが盗み見られたりする可能性があります。セッションIDがバレてしまうと乗っ取られて、なりすましでログインされてしまう可能性があります。<br/>
怖いですね。</p>

<h3><span id="i-5">対策は？</span></h3>

<p>セッションIDが一度発行されてきり、ずっと同じIDを使用するのでは危険です。<br/>
セッションIDが攻撃者に入手されたらアウトですし、攻撃者がセッションIDを指定してユーザに使用させるということもできるようです。</p>

<p>つまり、同じセッションIDをずっと使っているのはよくないのです。</p>

<p>そのため、ログイン後に既存のセッションを破棄して、<br/>
新しいIDでセッションを開始するという手法が取られます。<br/>
ログインするたびに、常に新しいIDを使用するのです。</p>

<p>PHPでは、session_regenerate_id()関数を使用することで、<br/>
セッションIDを新しいものと置き換えることができます。<br/>
<code>sesseion_regenerate_id(true);</code>と引数をtrueとすることで、<br/>
古いセッション情報を削除することができます。（PHP5.1.0以降）</p>

<p>以上、ログイン処理時に考慮すべきセキュリティ対策の備忘でした。</p>
]]></content>
  </entry>
  
</feed>
